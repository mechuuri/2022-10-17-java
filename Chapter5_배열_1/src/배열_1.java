/*
 * 	182p.
 * 	배열 => 여러개의 변수를 하나로 묶어서 관리하는 역할 
 * 	-------------> 일차배열, 다차원배열, 가변배열	
 * 
 * 	배열
 * 		장점 : 변수 여러개를 한개의 이름으로 제어 (반복문을 사용하기 쉬움)
 * 			  연속적으로 메모리 배치 (인덱스 번호를 이용해서 처리가 가능)
 * 		단점 : 고정적이다 ==> 가변형 (수시로 늘어났다 줄었다 함 > 컬렉션.12장)
 * 			  같은 데이터형만 모아서 관리
 * 	
 * 	배열 생성 / 초기값 ==> 변수(필요시에 따라 값을 변경할 수 있다)
 * 	-> 같은 데이터형만 여러개 모아서 관리
 * 	------------ int[] arr={'A','B'};
 * 				double[] arr={10,'A',10.5} ==> true / false만 안됨
 * 				--------------------------
 * 				10.0	65.0	10.5  ==> 자동 형변환되어 실수로 저장됨
 * 
 * 	-> 메모리 구조가 연속적으로 배치 ==> 순번으로 구분(index)
 * 	-> 데이터, 클래스가 많을 때... >> 한개로 통합하여 관리하긔~~
 *  시작 위치가 저장되는 게 배열명? arr[0] 100번 째 값의 첫번째 ==> 이름이 통일돼서 관리하기 편함. 크기가 항상 일정 => 같은 데이터형만 다른 데이터형은 클래스로 묶
 * 	메모리 위치가 다름 >> 주소로 분류(heap) 
 * 
 */
// 최대값 구하기 

public class 배열_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*int a=80,b=70,c=50,d=60,e=100;
		int max=0;
		//if => 5번 반복
		if(max<a)
			max=a;
		if(max<b)
			max=b;
		if(max<c)
			max=c;
		if(max<d)
			max=d;
		if(max<e)
			max=e;
		// 출력 ==> 5번 반복
		System.out.println("a="+a);
		System.out.println("b="+b); 
		System.out.println("c="+c);
		System.out.println("d="+d); 
		System.out.println("e="+e);
		System.out.println("max="+max); */
		// 같은 데이터가 3개 이상 ==> 배열
		int[] arr= {80,70,50,60,100};
		/*
		 * 	arr
		 * 	-----		------------------------------------------------
		 * 	100번지			80		70		50		60		100
		 * 	-----		|----------|-------|--------|---------|------------
		 * 				100		  104	  108	  112	    116
		 * 				arr+0*4	 arr+1*4	 arr+2*4  arr+3*4 	  arr+4*4
		 * 					arr[0]	  arr[1]	arr[2]	arr[3]	arr[4]
		 *					배열명		 메모리 위치(인덱스) 
		 *										ㄴ 순차적으로 생성 ==> for
		 * 				배열 갯수보다 1개가 적다 (인덱스번호는 항상 0번부터 시작하여 순차적으로)
		 * 				주의점 * 인덱스번호가 초과되는 에러가 발생
		 * 						* 수정이 편해야됨 재사용 해야됨
		 * 
		 */
		int max=0;
		for(int i=0;i<5;i++)
		{
			if(max<arr[i])
				max=arr[i];
		}
		for(int i=0;i<5;i++)
		{
			System.out.println("arr["+i+"]="+arr[i]);
		}
		System.out.println("max="+max);
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
